
==================== FINAL INTERFACE ====================
2018-02-18 22:29:00.988255 UTC

interface main:Main 8022
  interface hash: 9362c01c5aadc8bc2816882d51366b3b
  ABI hash: d27a49925374682c4f321e79d907ce82
  export-list hash: 81c0b82135a29f9b5b64eff96de08af6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 94b77828a1e80d71c72e14a21bbdbda4
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.hanoi
  Main.main
  Main.Direction
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      hanoi-cyclic-0.1.0.0 integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Bits e0790a03e1e51e2d053ee3f563937f85
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hanoi-cyclic-0.1.0.0:Lib 0dd5c1c866bcf96eef1892795c9d0c7a
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
8b99c2838dcfd95168bcad2e4c6059d2
  $whanoi :: GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild2 {
                   GHC.Types.False
                   -> let {
                        b :: GHC.Prim.Int# = GHC.Prim.negateInt# ww
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# b 64#) of wild3 {
                        GHC.Types.False
                        -> let {
                             y :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftRA# 1# b
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># 1# y) of wild {
                             GHC.Types.False
                             -> letrec {
                                  go :: GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Int)]
                                    {- Arity: 1, Strictness: <L,U> -}
                                  = \ (x :: GHC.Prim.Int#) ->
                                    GHC.Types.:
                                      @ (GHC.Types.Int, GHC.Types.Int)
                                      (case GHC.Classes.modInt#
                                              (GHC.Prim.andI# x (GHC.Prim.-# x 1#))
                                              3# of ww2 { DEFAULT ->
                                       GHC.Types.I# ww2 },
                                       case GHC.Classes.modInt#
                                              (GHC.Prim.+# (GHC.Prim.orI# x (GHC.Prim.-# x 1#)) 1#)
                                              3# of ww2 { DEFAULT ->
                                       GHC.Types.I# ww2 })
                                      (case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.==# x y) of wild1 {
                                         GHC.Types.False -> go (GHC.Prim.+# x 1#)
                                         GHC.Types.True
                                         -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int) })
                                } in
                                go 1#
                             GHC.Types.True -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int) }
                        GHC.Types.True -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int) }
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 64#) of wild3 {
                        GHC.Types.False
                        -> let {
                             y :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftL# 1# ww
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># 1# y) of wild {
                             GHC.Types.False
                             -> letrec {
                                  go :: GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Int)]
                                    {- Arity: 1, Strictness: <L,U> -}
                                  = \ (x :: GHC.Prim.Int#) ->
                                    GHC.Types.:
                                      @ (GHC.Types.Int, GHC.Types.Int)
                                      (case GHC.Classes.modInt#
                                              (GHC.Prim.andI# x (GHC.Prim.-# x 1#))
                                              3# of ww2 { DEFAULT ->
                                       GHC.Types.I# ww2 },
                                       case GHC.Classes.modInt#
                                              (GHC.Prim.+# (GHC.Prim.orI# x (GHC.Prim.-# x 1#)) 1#)
                                              3# of ww2 { DEFAULT ->
                                       GHC.Types.I# ww2 })
                                      (case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.==# x y) of wild1 {
                                         GHC.Types.False -> go (GHC.Prim.+# x 1#)
                                         GHC.Types.True
                                         -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int) })
                                } in
                                go 1#
                             GHC.Types.True -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int) }
                        GHC.Types.True
                        -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int) } }) -}
ab8f1f67fdeb84a4eb4097f4d422ec30
  $wshowl ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
c9d9a814b7b00de2379fa87456d4ebf2
  type Direction = GHC.Base.String
1f5dbe3128d71a21e0c24d5082a9e693
  hanoi :: GHC.Types.Int -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$whanoi ww1 }) -}
b7e23af9a49ad071567a55facd4db87e
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
c11990729745012e96ebff81f86a6e32
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True) -}
51c986c15dcb0b53ab66514882efc1bf
  main2 :: GHC.Base.String
  {- Unfolding: (case Main.$whanoi 5# of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (case ww1 of ww4 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showList__1
                                      (GHC.Show.$fShow(,)_$sgo1
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            (Main.main_showl xs))
                                         (\ (w2 :: GHC.Base.String)[OneShot] ->
                                          case ww2 of ww5 { GHC.Types.I# ww6 ->
                                          case GHC.Show.$wshowSignedInt
                                                 0#
                                                 ww6
                                                 w2 of ww7 { (#,#) ww8 ww9 ->
                                          GHC.Types.: @ GHC.Types.Char ww8 ww9 } })
                                         (GHC.Types.[] @ GHC.Show.ShowS))) of ww5 { (#,#) ww6 ww7 ->
                            GHC.Types.: @ GHC.Types.Char ww6 ww7 } }) }) }) -}
1b1dd4a42ffe29ddc34f1e3080f38316
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
9484db1999b374ffcb1dce507de4bd7e
  main_showl :: [(GHC.Types.Int, GHC.Types.Int)] -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                 case Main.$wshowl w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

